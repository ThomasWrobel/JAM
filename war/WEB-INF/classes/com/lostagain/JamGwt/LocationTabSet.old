package com.darkflame.client;

import java.util.ArrayList;
import java.util.Iterator;

import com.google.gwt.http.client.Request;
import com.google.gwt.http.client.RequestBuilder;
import com.google.gwt.http.client.RequestCallback;
import com.google.gwt.http.client.RequestException;
import com.google.gwt.http.client.Response;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.DecoratedTabPanel;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.SourcesTabEvents;
import com.google.gwt.user.client.ui.TabListener;

public class LocationTabSet extends DecoratedTabPanel {	
	
	boolean tagsFunctionDisabled = false;
    final public SetActiveAnswersFromTab OurTabListener = new SetActiveAnswersFromTab();	
  //array we keep list of open pages in this tabset
	final ArrayList<String> OpenPagesInSet = new ArrayList<String>();
	
	public LocationTabSet() {	
			
		this.setStylePrimaryName("standard_message_back");
		//add auto scroll;
		
		this.setStylePrimaryName("overflowscroll");
		
		this.setStylePrimaryName("standard_message");
		
		if (MyApplication.Client.indexOf("firefox")>-1){
			this.getDeckPanel().setAnimationEnabled(false);
		} else {
		this.getDeckPanel().setAnimationEnabled(true);
		}
		
		
		this.addTabListener(OurTabListener);
		this.setSize("100%", "100%");
		
		
		//this.getDeckPanel().setSize("97%", "97%");
		this.getDeckPanel().setSize("100%", "100%");

	}
	public void disableAllTabFunctions() {
		tagsFunctionDisabled = true;
	}
	public final class SetActiveAnswersFromTab implements TabListener {
		public void onTabSelected(SourcesTabEvents sender, int tabIndex) {
		        // Let the user know what they just did.	
			
			  if (tagsFunctionDisabled==false)
			  {
				  MyApplication.chapter = MyApplication.locationpuzzlesActive.get(tabIndex);
			   //set location
			   Window.setTitle(MyApplication.Username+ LoadGamesText.MainGame_is_on_chapter + MyApplication.chapter);
			  // Feedback.setText("You goto the " + chapter+".");
			   
			   
			  } 
		  }

		public boolean onBeforeTabSelected(SourcesTabEvents sender, int tabIndex) {
		        // Let the user know what they just did.				        
		        return true;
		  }			
	}
	public void removePage(final String RemoveLocation) {
		
		//loop over page list and remove this

		  for (Iterator<String> it = OpenPagesInSet.iterator(); it.hasNext(); ) {
			  
			  String currentItem = it.next(); 			  
		  
			  if (currentItem.compareTo(RemoveLocation)==0){
				  OpenPagesInSet.remove(currentItem);
			  }
		
		  }
		
		int TabCount = this.getWidgetCount();
		int cindex =0;
		System.out.println("remove-"+RemoveLocation);
		
		//remove tab
		 while(cindex<TabCount)
	        {
	        	if (MyApplication.openPages.get(cindex).indexOf(RemoveLocation)>-1) {	
       		
	        		//we remove it from the tabs
	        		this.remove(cindex);

	        		MyApplication.openPages.remove(cindex);
		    		// set chapter name to match
	        		MyApplication.locationpuzzlesActive.remove(cindex);
	        		
	        		
	        		return;
	        	}
	        	cindex++;
	        }
		
	}
	public void setNewPage(final String NewMessageURL) {

		System.out.print("setting page"+NewMessageURL);
		OpenPagesInSet.add(NewMessageURL);
		// First we check if its on the page list already.
		// ==
		
		
		int TabCount = this.getWidgetCount();
		int cindex =0;
		System.out.println("/n index"+cindex+"tabCount"+TabCount);
		
	        while(cindex<TabCount)
	        {
	        	if (MyApplication.openPages.get(cindex).indexOf(NewMessageURL)>-1) {
	        		System.out.println("/n match. Already Open.");
	        		//we set it to front and return
	        		this.selectTab(cindex);
	        		
		    		
	        		return;
	        	}
	        	
	        	
	        	cindex++; 
	        }
		
		
		
		//place the current location in a temp
	    final LocationTabSet TempCurrentLocationTabs = this;
	    
	    //disable answer box
	    MyApplication.AnswerBox.setEnabled(false);
	    
	    //turned off while offline
	    /*
	    RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.POST,
				textfetcher_url);
			*/
	    
	   RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.GET,
				"Game Message Text/" + NewMessageURL.trim());
				try {
					 requestBuilder.sendRequest("", new RequestCallback() {			
				        public void onError(Request request, Throwable exception) {
				        	System.out.println("http failed");
				        	MyApplication.AnswerBox.setEnabled(true);
				    	    
				        	MyApplication.AnswerBox.setText("");
				        }

				        public void onResponseReceived(Request request, Response response) {

				        	HTML StoryText = new HTML(response.getText());
				        	StoryText.setHTML("t");
				        	StoryText.setStylePrimaryName("overflowscroll");
				        	
				        	//System.out.println(StoryText);
				        	//StoryText.setSize("100%", "100%");
				        	
				        	Label Tab = new Label();
				    		Tab.setText(NewMessageURL.substring(0, NewMessageURL.length()-5));
				    		
				    		// if current location is the active one, then we add to the lists;
				    		
				    		if (TempCurrentLocationTabs.equals(this)) {
				    		// add opened chapter name to list
				    			MyApplication.openPages.add(NewMessageURL);
				    		// set chapter name to match
				    			MyApplication.locationpuzzlesActive.add(MyApplication.chapter);
				    			MyApplication.AnswerBox.setEnabled(true);
				    			MyApplication.AnswerBox.setFocus(true);
				    			MyApplication.AnswerBox.setText("");
				    		}
				    		
				    		TempCurrentLocationTabs.add(StoryText,(NewMessageURL.substring(0, NewMessageURL.length()-5)));		
				    		TempCurrentLocationTabs.selectTab(TempCurrentLocationTabs.getWidgetIndex(StoryText));
				    		
				    		
				        }
				      });
				    } catch (RequestException ex) {
				    	System.out.println("cant load message text");
				    	MyApplication.AnswerBox.setEnabled(true);
			    	    
				    	MyApplication.AnswerBox.setText("");
				    }
	}
}
