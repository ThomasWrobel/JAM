package com.darkflame.client;


import com.allen_sauer.gwt.voices.client.SoundController;

import com.google.gwt.core.client.EntryPoint;
import com.allen_sauer.gwt.voices.client.Sound;
import com.allen_sauer.gwt.voices.client.SoundController;

import com.darkflame.client.InventoryPanel;
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.http.client.Request;
import com.google.gwt.http.client.RequestBuilder;
import com.google.gwt.http.client.RequestCallback;
import com.google.gwt.http.client.RequestException;
import com.google.gwt.http.client.Response;
import com.google.gwt.http.client.URL;
import com.google.gwt.i18n.client.Dictionary;

import org.adamtacy.client.ui.NEffectPanel;
import org.adamtacy.client.ui.effects.core.NMorphStyle;
import org.adamtacy.client.ui.effects.impl.css.Rule;
import com.google.gwt.user.client.ui.Grid;

import com.google.gwt.user.client.ui.DecoratedTabPanel;
import com.google.gwt.user.client.ui.DecoratorPanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import java.util.ArrayList;
import java.util.Iterator;

import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.KeyboardListener;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.HistoryListener;
import com.google.gwt.user.client.WindowResizeListener;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.MouseListener;
import com.google.gwt.user.client.ui.SimplePanel;
import com.google.gwt.user.client.ui.TabListener;
import com.google.gwt.user.client.ui.SourcesTabEvents;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.Window;;


/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class MyApplication implements EntryPoint, HistoryListener {

	static String controllscript = "";
	static String itemmixscript = "";
	
	static String chapter = "";
	
	static //player data
	String Username="";
	static String organisation="";
	

	HTML MainStoryText = new HTML();
	final static TextBox AnswerBox = new TextBox();
	static final TypedLabel Feedback = new TypedLabel("");
	  
	static final LoginBox user_login = new LoginBox();
	
	//Chapter list
	static VerticalTabs ChapterList = new VerticalTabs();
	
	//Effect panel that controlls whole of StoryPanel
	static NEffectPanel StoryEffect = new NEffectPanel();	
	
	final Label LocationLabel = new Label("Locations;");
	private boolean StartFromURL = false;
	//story current locations
	static DecoratedTabPanel StoryTabs = new DecoratedTabPanel();
	
	//list of opened pages in active chapter
	final static ArrayList<String> openPages = new ArrayList<String>();
	final static ArrayList<String> locationpuzzlesActive = new ArrayList<String>();
	
	//list of opened chapters	
	final static ArrayList<LocationTabSet> AllLocationTabSets = new ArrayList<LocationTabSet>();
	
	//current chapters locations
	static LocationTabSet CurrentLocationTabs =  new LocationTabSet();
	static int CurrentLocationTabsIndex=0;
	
	//fader
	final static public fader fadeback = new fader();
	 
	//introtransition
	final static public TransitionGridImage Intro = new TransitionGridImage();
	
	//interface buttons
	final static public Image InventoryButton = new Image("GameIcons/Inventory_closed.png");
	final static public Image NotepadButton = new Image("GameIcons/Notebook_closed.png");
	final static public Image ControllPanelButton = new Image("GameIcons/System_closed.png");
	
	
	final static ControllPanel ControlPanel = new ControllPanel();
	final static PopUpWithShadow ControllPanelShadows = new PopUpWithShadow("50%","25%","Save / Load Your Game",ControlPanel);
	
	final static InventoryPanel PlayersInventory = new InventoryPanel();
	final static Notebook PlayersNotepad= new Notebook();
	
	final static Button EnterAns = new Button("-Submit-");
	final static HorizontalPanel AnsBar = new HorizontalPanel();
	
	//interface open/close flag
	public static boolean InventoryOpen = false;
	public static boolean NotepadOpen = false;
	public static boolean ControllPanelOpen= false;
	
	
	//overlay popup list ;
	final static ArrayList<overlayPopUp> overlayPopUpsOpen = new ArrayList<overlayPopUp>();
	
	
	//locations
	public static final String textfetcher_url = "text%20fetcher.php";
	
	//audio location
	public static final String audioLocation_url = "audio/";
	
	//item locations 
	static final String inventory_url = "InventoryItems/";
	
	//item locations 
	static final String notebookpages_url = "NotebookPages/";
	
	//sound controller (for effects);
	static final SoundController soundController = new SoundController();
	
	//music box (for music)
	static final MusicBox musicPlayer = new MusicBox();
	
	
	public void onModuleLoad() {

		
		// Set loading text
		MainStoryText.setText("loading..");

		// test login
		test_for_logged_in_user();
		
	
		
		//disable button
		AnswerBox.setEnabled(false);
		
		//set user data
		/*
		Dictionary existing_data = Dictionary
		.getDictionary("user_data");
        Username = existing_data.get("username");
        organisation = existing_data.get("organisation");
        
        System.out.print("\n Game player = " + Username);
        System.out.print("\n Player organisation = " + organisation);
		
        Window.setTitle(Username+"'s game is loading");
        */
       
		//Set basic window propertys		
		//Window.enableScrolling(false);
		
		// First we load the main control script

		startgamefromcontrollfile("Game Controll Script/Main_Game_Controll.txt");
		
		//startgamefromlocalcontrollfile("Game Controll Script/Main_Game_Controll.txt");
		
		//Load item mix script
		LoadItemMixScript ();
		
		
		//add history listener
		History.addHistoryListener(this);
		
			
		if (History.getToken().length() > 0) {		
			String decoded =  URL.decodeComponent(History.getToken());
			StartFromURL  = true;
			
				onHistoryChanged(decoded);
			}
	    
		// Set Label style
		
		StoryTabs.setStylePrimaryName("standard_message_back");
		StoryEffect.setSize("100%", "100%");
		AnswerBox.setEnabled(true);
		StoryEffect.add(Feedback);
				
		// while waiting for that we load the text boxs into the interface;
		
		//set chapter list
		
		ChapterList.setSize("100%", "100%");
		
		ChapterList.setStylePrimaryName("standard_message_back");
		

		Feedback.setWidth("100%");
		Feedback.setHeight("5px");
		
		Feedback.setStyleName("Feedback");
		
		//MainStoryText.setReadOnly(true);
		//MainStoryText.setStyleName("standard_message");
		System.out.print("________height="+StoryTabs.getOffsetHeight());
		
		
		
		//Story tabs
		StoryTabs.setSize("100%", "100%");
		StoryTabs.getDeckPanel().setSize("100%", "100%");
		//StoryTabs.getDeckPanel().setHeight(Window.getClientHeight()*0.732+"px");
		//StoryTabs.getDeckPanel().setHeight(Window.getClientHeight()*0.63+"px");
		
		Window.addWindowResizeListener(new WindowResizeListener(){
			public void onWindowResized(int width, int height) {
				//StoryTabs.getDeckPanel().setHeight(height*0.63+"px");	
				
				//Window.alert("-"+StoryTabs.getParent().getOffsetWidth());
				StoryTabs.setSize("100%", "100%");
				StoryTabs.setWidth(""+(StoryTabs.getParent().getOffsetWidth()-16)+"px");
				StoryTabs.setHeight((StoryTabs.getParent().getOffsetHeight()-15)+"px");
				StoryTabs.getDeckPanel().setSize("100%", "100%");
			}
			
		});
		
		StoryTabs.setStylePrimaryName("standard_message");
		StoryTabs.getDeckPanel().setAnimationEnabled(true);
	
		
		//and onto the location panel
		//create first location set
		//Location tab panel
		//final LocationTabSet WelcomeTabs = new LocationTabSet();
		//AllLocationTabSets.add(WelcomeTabs);
		//set Welcome as first part.
		//CurrentLocationTabs = WelcomeTabs;	
		//CurrentLocationTabsIndex = AllLocationTabSets.indexOf(WelcomeTabs);
		
		//newchapter("Introduction & FAQ");
		//setNewPage("Introduction.html");
		//System.out.print("__________"+AllLocationTabSets.size());
		
		
		//add to story tabs
		//StoryTabs.add(CurrentLocationTabs, "Welcome");	
		
		//ChapterList.addTab("Welcome",0);
		//StoryTabs.selectTab(0);		
		CurrentLocationTabs.setHeight("100%");
		
		//remove welcome from being active
		
		CurrentLocationTabs.removeTabListener(CurrentLocationTabs.OurTabListener);
		openPages.clear();
		locationpuzzlesActive.clear();
		
		
		//Create the first chapter
		//final LocationTabSet Firstchapter = new LocationTabSet();
		//AllLocationTabSets.add(Firstchapter);		
		//CurrentLocationTabs = AllLocationTabSets.get(1);
		
		//create first chapter, adding its locations
		//StoryTabs.add(CurrentLocationTabs, "Part 1: The Awakening");	
		//ChapterList.addTab("Part 1: The Awakening",1);
		//StoryTabs.selectTab(0);
		StoryTabs.getTabBar().setVisible(false);
		CurrentLocationTabs.setHeight("100%");
		//create first tab
		//Label Tab0 = new Label();
		//Tab0.setText("Welcome");
		//openPages.add("Welcome");

		// set chapter name to match
		//locationpuzzlesActive.add("Welcome");
		
		//CurrentLocationTabs.add(MainStoryText,openPages.get(0));			
		//CurrentLocationTabs.selectTab(0);
		MainStoryText.setSize("100%", "100%");
		//Add inventory

		    InventoryButton.addClickListener(new ClickListener() {
		      public void onClick(Widget sender) {
		    	  PlayersInventory.ShowDefault();
		    	  
		    	  
		      }
		    });
		    InventoryButton.addMouseListener(new MouseListener() {
			      public void onMouseDown(Widget sender,int mx,int my) {
			    	  InventoryButton.setUrl("GameIcons/Inventory_open.png");
			    	  //toggle inventory open
			    	  InventoryOpen = true;
			    	  
			      }
			      public void onMouseUp(Widget sender,int mx,int my) {
			    	   
			      }
			      public void onMouseEnter(Widget sender) {
			    	  InventoryButton.setUrl("GameIcons/Inventory_open.png");
			      }
			      public void onMouseMove(Widget sender,int mx,int my) {
			    	   
			      }
			      public void onMouseLeave(Widget sender)
			      {
			    	  if (InventoryOpen == false){
			    	  InventoryButton.setUrl("GameIcons/Inventory_closed.png");
			    	  }
			      }
			    });
		    
		    
		  //Add Notepad

		    NotepadButton.addClickListener(new ClickListener() {
		      public void onClick(Widget sender) {

		          RootPanel.get().add(MyApplication.fadeback,0, 0);
		    	  PlayersNotepad.ShowDefault();
		    	  
		    	  
		      }
		    });
		    NotepadButton.addMouseListener(new MouseListener() {
			      public void onMouseDown(Widget sender,int mx,int my) {
			    	  
			    	  NotepadOpen = true;
			    	  
			    	  NotepadButton.setUrl("GameIcons/Notebook_open.png");
			    	  //toggle inventory open
			    	  //NotepadOpen = true;
			    	  
			      }
			      public void onMouseUp(Widget sender,int mx,int my) {
			    	   
			      }
			      public void onMouseEnter(Widget sender) {
			    	  NotepadButton.setUrl("GameIcons/Notebook_open.png");
			      }
			      public void onMouseMove(Widget sender,int mx,int my) {
			    	   
			      }
			      public void onMouseLeave(Widget sender)
			      {
			    	  if (NotepadOpen == false){
			    		  NotepadButton.setUrl("GameIcons/Notebook_closed.png");
			    	  }
			      }
			    });
		
		    ControllPanelButton.addClickListener(new ClickListener() {
			      public void onClick(Widget sender) {

			          RootPanel.get().add(MyApplication.fadeback,0, 0);
			          ControlPanel.ShowDefault();
			    	  
			    	  
			      }
			    });
		    
		    ControllPanelButton.addMouseListener(new MouseListener() {
			      public void onMouseDown(Widget sender,int mx,int my) {
			    	  
			    	// NotepadOpen = true;
			    	  
			    	  ControllPanelButton.setUrl("GameIcons/System_open.png");
			    	  //toggle inventory open
			    	  ControllPanelOpen= true;
			    	  
			      }
			      public void onMouseUp(Widget sender,int mx,int my) {
			    	   
			      }
			      public void onMouseEnter(Widget sender) {
			    	  ControllPanelButton.setUrl("GameIcons/System_open.png");
			      }
			      public void onMouseMove(Widget sender,int mx,int my) {
			    	   
			      }
			      public void onMouseLeave(Widget sender)
			      {
			    	  if (ControllPanelOpen == false){
			    		  ControllPanelButton.setUrl("GameIcons/System_closed.png");
			    	  }
			      }
			    });
		

		    
		RootPanel.get("Inventory").add(InventoryButton);
		RootPanel.get("Notepad").add(NotepadButton);
		RootPanel.get("chapterlist").add(ChapterList);
		RootPanel.get("bigtextbox").add(StoryTabs);
		
		RootPanel.get("ControllPanel").add(ControllPanelButton);
		RootPanel.get("musicControll").add(musicPlayer);
		
		//RootPanel.get("answerbox").add(AnswerBox);
		//RootPanel.get("answerbox").add(EnterAns);
				
		RootPanel.get("feedback").add(Feedback);
		//AnsBar.setWidth("100%");
		AnsBar.add(AnswerBox);
		//AnsBar.setBorderWidth(2);
		AnsBar.add(EnterAns);
		//EnterAns.setWidth("200px");
		RootPanel.get("ansbar").add(AnsBar);
		
		
		//size has to be set after its added
		
		StoryTabs.setSize("100%", "100%");
		StoryTabs.setWidth(""+(StoryTabs.getParent().getOffsetWidth()-16)+"px");
		StoryTabs.setHeight((StoryTabs.getParent().getOffsetHeight()-15)+"px");
		StoryTabs.getDeckPanel().setSize("100%", "100%");
		
	}
	
	
	
	public void startgamefromlocalcontrollfile(final String fileurl) {
		RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.GET,
				fileurl);
				
				try {
				      requestBuilder.sendRequest("", new RequestCallback() {
				        public void onError(Request request, Throwable exception) {
				        	System.out.println("http failed");
				        }

				        public void onResponseReceived(Request request, Response response) {

				        	//catch error
				        	if (response.getText().length()<10){
				        		System.out.println("controll file not recieved;"+response.getText());
				        		MainStoryText.setText("controll file not recieved;"+response.getText());
				        		return;
				        	}
				        	
							controllscript = response.getText();

							// crop till start;
							// "Game Controll Starts Here:"

							int StartIndex = controllscript
									.indexOf("Game Controll Starts Here:");
														
							controllscript = controllscript.substring(StartIndex,
									controllscript.length());
							
							System.out.print(controllscript);

							// once loaded we start the main game loop
							maingameloop();
				        }
				      });
				    } catch (RequestException ex) {
				    	System.out.println("can not connect to game controll file");
				    }

		
		
		
	}
	public void LoadItemMixScript () {
		
		
		//RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.POST,
			//	textfetcher_url);
		RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.GET,
				inventory_url+"ItemControllScript.txt");
				try {
				      requestBuilder.sendRequest("", new RequestCallback() {
				        public void onError(Request request, Throwable exception) {
				        	System.out.println("http failed");
				        }

				        public void onResponseReceived(Request request, Response response) {

				        	String responsetext = response.getText();
				           //update widgets HTML field
				        	itemmixscript = responsetext;
				        }
				      });
				    } catch (RequestException ex) {
				    	String responsetext = "can not connect to game controll file";
				    	itemmixscript = responsetext;
				    }
				    
			

	}
	public void GetTextSecurely (final String fileurl,final HTML updateThis) {
		
		
		RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.POST,
				textfetcher_url);
				
				try {
				      requestBuilder.sendRequest("FileURL=" + fileurl, new RequestCallback() {
				        public void onError(Request request, Throwable exception) {
				        	System.out.println("http failed");
				        }

				        public void onResponseReceived(Request request, Response response) {

				        	String responsetext = response.getText();
				           //update widgets HTML field
				           updateThis.setText(responsetext);
				        }
				      });
				    } catch (RequestException ex) {
				    	String responsetext = "can not connect to game controll file";
				    	 updateThis.setText(responsetext);
				    }
				    
			

	}
	public void startgamefromcontrollfile(final String fileurl) {
		
		RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.POST,
				textfetcher_url);
				
				try {
				      requestBuilder.sendRequest("FileURL=" + fileurl, new RequestCallback() {
				        public void onError(Request request, Throwable exception) {
				        	System.out.println("http failed");
				        }

				        public void onResponseReceived(Request request, Response response) {

				        	//catch error
				        	if (response.getText().length()<10){
				        		System.out.println("controll file not recieved;"+response.getText());
				        		MainStoryText.setText("controll file not recieved;"+response.getText());
				        		return;
				        	}
				        	
							controllscript = response.getText();

							// crop till start;
							// "Game Controll Starts Here:"

							int StartIndex = controllscript
									.indexOf("Game Controll Starts Here:");
														
							controllscript = controllscript.substring(StartIndex,
									controllscript.length());
							
							System.out.print(controllscript);

							// once loaded we start the main game loop
							
							// maingameloop();
				        }
				      });
				    } catch (RequestException ex) {
				    	System.out.println("can not connect to game controll file");
				    }

	}

	public void maingameloop() {

		// Maingame here

		// Set loading text
		MainStoryText.setText("loading....");

		//grab start commands
		int FirstBitsStart = controllscript.indexOf("Start:", 0)+6;
		int FirstBitsEnd = controllscript.indexOf("ans=", 0);
		System.out.print("/n ans next pos="+FirstBitsStart);		
			
		//Isolate instructions to process		
		final String instructionset = controllscript.substring(FirstBitsStart, FirstBitsEnd);		
		
		System.out.print("\n -instruction set- \n "+instructionset+" \n -instruction set- \n");
		
		//if theres no preloaded instructions, then we process the first lot
		if (StartFromURL == false) {
		processInstructions(instructionset);
		}
		
		/*
		
		// Set start chapter

		int StartIndex = controllscript.indexOf("Start:");
		int ChapterPositionStart = controllscript.indexOf("- SetLocation =",
				StartIndex + 6);
		int ChapterPositionEnd = controllscript.indexOf("\n",
				ChapterPositionStart + 15);

		chapter = controllscript.substring(ChapterPositionStart + 15,
				ChapterPositionEnd).trim();

		// set window title
		Window.setTitle("chapter-" + chapter);

		// --------------------
		// get start message location

		StartIndex = controllscript.indexOf("Start:");
		int StartPositionStart = controllscript.indexOf("- StoryBox =",
				StartIndex + 6);
		int StartPositionEnd = controllscript.indexOf("\n",
				StartPositionStart + 12);

		String startmessagename_url = controllscript.substring(
				StartPositionStart + 12, StartPositionEnd).trim();

		// Load starting message text

		// Update story text
		MainStoryText.setText("loading......");
		RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.POST,
				textfetcher_url);
				
				try {
				      requestBuilder.sendRequest("FileURL=Game Message Text/" + startmessagename_url, new RequestCallback() {
				        public void onError(Request request, Throwable exception) {
				        	System.out.print("http failed");
				        }

				        public void onResponseReceived(Request request, Response response) {

				        	MainStoryText.setHTML(response.getText());
				        }
				      });
				    } catch (RequestException ex) {
				    	System.out.print("can not load story text");
				    }

		// --------------------
*/
		// We add the answer listener to the main answer box;
		EnterAns.addClickListener(new ClickListener(){
			public void onClick(Widget Sender){
				// if over one letters scan if its correct answer
				if (AnswerBox.getText().length()>1){
				
				AnswerGiven(AnswerBox.getText());
				}
			}
		});
		
		AnswerBox.addKeyboardListener(new KeyboardListener() {
			public void onKeyUp(Widget sender, char Key, int Mod) {

			};

			public void onKeyPress(Widget sender, char Key, int Mod) {

			};

			public void onKeyDown(Widget sender, char Key, int Mod) {

				if (Key == 13) {
					AnswerBox.setText(RemoveCartReturns(AnswerBox.getText())
							.trim());

					// if over one letters scan if its correct answer
					if (AnswerBox.getText().length()>1){
					
					AnswerGiven(AnswerBox.getText());
					}

				}

			};
		});

	}

	public void AnswerGiven(String Ans) {
		
		//System.out.print("Answer given ="+Ans+"<br>");
		
		// trim and lower case the answer;
		Ans = Ans.trim().toLowerCase();
		
		// search for answer (specific to chapter)
		int AnswerIndex = controllscript.toLowerCase().indexOf("ans="+chapter.toLowerCase()+": "+Ans);
		
		System.out.print("Answer given ="+"ans="+chapter+": "+Ans);
		System.out.print("-"+AnswerIndex);
		
		if (AnswerIndex>-1){			
			// if its the right answer			
			//Feedback.setText("correct");
			//System.out.print("correct"+AnswerIndex+Ans.length()+chapter.length()+5);
			// send for answer processing
			CorrectAnswerProcess(AnswerIndex + Ans.length()+chapter.length()+6);
						// set window title
			Window.setTitle(Username+" is on chapter-" + chapter);
			return;
		} 
		
		// search for answer (non specific)
		AnswerIndex = controllscript.toLowerCase().indexOf("ans=: "+Ans);
		if (AnswerIndex>-1){			
			// if its the right answer			
			Feedback.setText("correct");
			System.out.print("correct"+6+AnswerIndex+Ans.length());
			// send for answer processing
			CorrectAnswerProcess(6+AnswerIndex + Ans.length());
						// set window title
			Window.setTitle(Username+" is on chapter-" + chapter);
			return;
		} 
		
/*
		while (tempstart < controllscript.length()) {

			// now search the main controll file for the string
			int AnswerIndex = controllscript.toLowerCase().indexOf(Ans,
					tempstart);

			System.out.print("Answer index"+AnswerIndex);
			
			// if not present, then answer is wrong
			if (AnswerIndex == -1) {
				Feedback.setText("wrong, sorry");
				tempstart = AnswerIndex + 1;
				break;

			} else if (!((controllscript.charAt(AnswerIndex - 1) == 32) || (controllscript
					.charAt(AnswerIndex - 1) == 58))) {

				// if the previous letter is not a colon or space, then its part
				// of
				// another word; wrong answer!
				Feedback.setText("wrong, sorry.");
				System.out.print("no colon before");
				tempstart = AnswerIndex + 1;

			} else if (!((controllscript.charAt(AnswerIndex + Ans.length()) == 32)
					|| (controllscript.charAt(AnswerIndex + Ans.length()) == 58) || (controllscript
					.charAt(AnswerIndex + Ans.length()) == 13))) {

				// if the next letter is not a colon or space, then its part of
				// another word; wrong answer!
				Feedback.setText("wrong ,sorry ");
				System.out.print("no colon after");
				tempstart = AnswerIndex + 1;

			} else {
				// if present, we check if its for the right question

				// search back till last new line
				int AnsQuestionS = controllscript.toLowerCase().lastIndexOf(
						"\n", AnswerIndex);
				String AnsQuestion = controllscript.substring(AnsQuestionS,
						AnswerIndex).trim();

				if (AnsQuestion.indexOf("ans" + chapter + ":") > -1) {
					// if its the right answer
					Feedback.setText("correct");

					// send for answer processing
					CorrectAnswerProcess(AnswerIndex + Ans.length());
					break;

				} else if (AnsQuestion.indexOf("ans:") > -1) {
					// its a general answer
					Feedback.setText("correct (general)");

					// send for answer processing
					CorrectAnswerProcess(AnswerIndex + Ans.length());
					break;

				} else {
					Feedback.setText("wrong, sorry");
					tempstart = AnswerIndex + 1;
					continue;
				}

			}

		}*/

		

	}

	public void CorrectAnswerProcess(int StartHere) {

		// get position of next answer
		int NextAnsPos = controllscript.indexOf("ans=", StartHere);
		System.out.print("/n ans next pos="+NextAnsPos);
		
			
		//Isolate instructions to process		
		final String instructionset = controllscript.substring(StartHere, NextAnsPos);		
		
		System.out.print("\n -instruction set- \n "+instructionset+" \n -instruction set- \n");
		
		processInstructions(instructionset);
		
		
		
	}

	public static void processInstructions(String instructionset) {
		int StartHere;
		//Start pos to zero
		StartHere = 0;
		instructionset=instructionset+"\n";
		// clear command var
		String CurrentCommand = "";
		String CurrentProperty = "";
		
		//Loop for each instruction
		
		while (instructionset.indexOf("- ", StartHere)>-1)
		{
			StartHere = instructionset.indexOf("- ", StartHere)+2;
			
			// Get name of current command
			CurrentCommand = instructionset.substring(StartHere,instructionset.indexOf(" = ", StartHere)).trim();
			CurrentProperty = instructionset.substring(instructionset.indexOf(" = ", StartHere)+3,instructionset.indexOf("\n", StartHere)).trim();
			// Get the property of the command
			
			//test
			System.out.print("\n command recieved;"+CurrentCommand+"\n");
			System.out.print("\n command property recieved;"+CurrentProperty+"\n");
			
			//on different commands we do different things;
			//boy, I wish java support strings on switchs
			
			if (CurrentCommand.equalsIgnoreCase("SetLocation")){
				
				System.out.print("setting chapter to '"+CurrentProperty+"'; \n");
				chapter = CurrentProperty;
				Window.setTitle(Username+" is on chapter-" + chapter);
				
			} else if (CurrentCommand.equalsIgnoreCase("Message"))
			{
				System.out.print("setting feedback '"+CurrentProperty+"'; \n");
				Feedback.setText(CurrentProperty.substring(1,(CurrentProperty.length()-1)));
			}  else if (CurrentCommand.equalsIgnoreCase("AddItem"))
			{
				System.out.println("Adding "+CurrentProperty+" to the inventory \n");
				PlayersInventory.AddItem(CurrentProperty);
			} else if (CurrentCommand.equalsIgnoreCase("RemoveItem"))
			{
				System.out.println("Removing "+CurrentProperty+" to the inventory \n");
				PlayersInventory.RemoveItem(CurrentProperty);
			}  else if (CurrentCommand.equalsIgnoreCase("SpecialEffect"))
			{
				System.out.println("Setting special effect to "+CurrentProperty+" \n");
				TriggerEffect(CurrentProperty);
			} else if (CurrentCommand.equalsIgnoreCase("StoryBox"))
			{
				System.out.print("Setting '"+CurrentProperty+"' to storybox \n");
				setNewPage(CurrentProperty);
				//CurrentLocationTabs.setNewPage(CurrentProperty);
				
				
			} else if (CurrentCommand.equalsIgnoreCase("RemoveLocation"))
			{
				System.out.print("Removing '"+CurrentProperty+"' from storybox \n");
				//removePage(CurrentProperty);	
				CurrentLocationTabs.removePage(CurrentProperty);
				
			} else if (CurrentCommand.equalsIgnoreCase("NewChapter"))
			{
				newchapter(CurrentProperty);			
				
			} else if (CurrentCommand.equalsIgnoreCase("AddProfile"))
			{
				PlayersNotepad.AddPage(CurrentProperty,CurrentProperty);			
				
			} else if (CurrentCommand.equalsIgnoreCase("PlaySound"))
			{
				Sound sound = soundController.createSound(Sound.MIME_TYPE_AUDIO_MPEG,audioLocation_url+CurrentProperty);
		         sound.play();		
				
			} else if (CurrentCommand.equalsIgnoreCase("AddMusicTrack"))
			{
				musicPlayer.addTrack(CurrentProperty);		
				
			}
			//after all commands we reselect the input box;
			AnswerBox.setFocus(true);
				
			
			
		}
	}
	static void newchapter(String CurrentProperty) {
		//remove quotes
		CurrentProperty = CurrentProperty.substring(1, (CurrentProperty.length()-1));
		
		System.out.print("Createing a new chapter called '"+CurrentProperty+"' \n");				
		
		
		LocationTabSet NewChapter = new LocationTabSet();
		AllLocationTabSets.add(NewChapter);	
		
		//disable current tabs
		CurrentLocationTabs.disableAllTabFunctions();
		
		openPages.clear();
		locationpuzzlesActive.clear();
		
		CurrentLocationTabsIndex = AllLocationTabSets.indexOf(NewChapter);
		CurrentLocationTabs = AllLocationTabSets.get(CurrentLocationTabsIndex);
		StoryTabs.add(CurrentLocationTabs, CurrentProperty);	
		ChapterList.addTab(CurrentProperty,StoryTabs.getWidgetIndex(CurrentLocationTabs));
		StoryTabs.selectTab(StoryTabs.getWidgetIndex(CurrentLocationTabs));
	}
public static void TriggerEffect(final String EffectName) {
		
	System.out.println("-"+EffectName+"-"+(EffectName.compareTo("Flash")==0));
	
		if (EffectName.compareTo("Flash")==0){
			
			System.out.print("effect go!");
			
			//NMorphStyle morph1 = new NMorphStyle(new Selector(".strike_white"), new Selector(".strike_purple")); 
			//MorphStyle ToWhite = new MorphStyle(new Selector(".strike_white"), new Selector(".strike_purple"));  
			//MorphStyle ToPurple = new MorphStyle(new Selector(".strike_purple"), new Selector(".strike_blue"));  
			//MorphStyle ToBlue = new MorphStyle(new Rule("start{background-color:#ffffff;}"),new Rule("end{background-color:#33ffee;"));
			//MorphStyle ToWhite = new MorphStyle(new Rule("start2{background-color: #8691ca }"),new Rule("end2{background-color: #dff3ff}"));
			//MorphStyle ToPurple = new MorphStyle(new Rule("start3{background-color: #dff3ff }"),new Rule("end3{background-color: #6d6288}"));
			
			
			
			NMorphStyle eff = new NMorphStyle(new Rule("start{background-color:#8691ca; }"),new Rule("end{background-color:#dff3ff; }"));
			NMorphStyle eff2 = new NMorphStyle(new Rule("start{background-color:#dff3ff; }"),new Rule("end{background-color:#6d6288; }"));
			NMorphStyle eff3 = new NMorphStyle(new Rule("start{background-color:#6d6288; }"),new Rule("end{background-color:#000000; }"));
			
			//eff.after(eff2, 1, StoryEffect);
			//eff2.after(eff3, 1, StoryEffect);
				
			StoryEffect.setEffectsLength(50);
			
			StoryEffect.addEffect(eff);	
			StoryEffect.addEffect(eff2);
			StoryEffect.addEffect(eff3);
			StoryEffect.setEffectsLength(50);
			
			eff.after(eff2, 50, StoryEffect);
			eff2.after(eff3, 50, StoryEffect);
			eff3.after(eff, 50, StoryEffect);
			
			eff.run(50);			
			
			
			//StoryEffect.addEffect(eff2);	
			//eff2.run(590);
			//StoryEffect.addEffect(eff3);	
			//eff3.run(590);
			
			
			
			
			
			//StoryEffect.setEffectsLength(0.1);
			//StoryEffect.playEffects();
			
			
			//StoryEffect.addEffect(ToWhite);
			//StoryEffect.addEffect(ToPurple);
			
			//StoryEffect.setEffectsLength(50);
			
			//StoryEffect.removeEffect(ToBlue);
			//StoryEffect.removeEffect(ToWhite);
			//StoryEffect.removeEffect(ToPurple);
			
		}
		
	}

	public void removePage(final String RemoveLocation) {
		
		int TabCount = CurrentLocationTabs.getWidgetCount();
		int cindex =0;
		System.out.println("remove-"+RemoveLocation);
		
  for (Iterator<String> it = CurrentLocationTabs.OpenPagesInSet.iterator(); it.hasNext(); ) {
			  
			  String currentItem = it.next(); 			  
		  
			  if (currentItem.compareTo(RemoveLocation)==0){
				  CurrentLocationTabs.OpenPagesInSet.remove(currentItem);
			  }
		
		  }
		
		//remove tab
		 while(cindex<TabCount)
	        {
	        	if (openPages.get(cindex).indexOf(RemoveLocation)>-1) {	
       		
	        		//we remove it from the tabs
	        		CurrentLocationTabs.remove(cindex);

	        		openPages.remove(cindex);
		    		// set chapter name to match
		    		locationpuzzlesActive.remove(cindex);
	        		
	        		
	        		return;
	        	}
	        	cindex++;
	        }
		
	}

	public static void setNewPage(final String NewMessageURL) {
		
		
		// First we check if its on the page list already.
		// ==
		
		
		int TabCount = CurrentLocationTabs.getWidgetCount();
		int cindex =0;
		System.out.println("/n index"+cindex+"tabCount"+TabCount);
		
	        while(cindex<TabCount)
	        {
	        	if (openPages.get(cindex).indexOf(NewMessageURL)>-1) {
	        		System.out.println("/n match. Already Open.");
	        		//we set it to front and return
	        		CurrentLocationTabs.selectTab(cindex);
	        		
		    		
	        		return;
	        	}
	        	
	        	
	        	cindex++; 
	        }
		
		
		//if it dosnt;
	        System.out.print("setting page"+NewMessageURL);
			CurrentLocationTabs.OpenPagesInSet.add(NewMessageURL.replace(".html", ""));
			
			
		//place the current location in a temp
	    final LocationTabSet TempCurrentLocationTabs = CurrentLocationTabs;
	    
	    //disable answer box
	    AnswerBox.setEnabled(false);
	    
		
		
	    //turned off while offline
	   
	    RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.POST,
				textfetcher_url);
		
	    
	 //  RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.GET,
				//"Game Message Text/" + NewMessageURL.trim());
				try {
					// requestBuilder.sendRequest("", new RequestCallback() {						    
				      requestBuilder.sendRequest("FileURL=Game Message Text/" + NewMessageURL.trim(), new RequestCallback() {
				        public void onError(Request request, Throwable exception) {
				        	System.out.println("http failed");
				        	AnswerBox.setEnabled(true);
				    	    
				        	AnswerBox.setText("");
				        }

				        public void onResponseReceived(Request request, Response response) {

				        	HTML StoryText = new HTML( MyApplication.SwapCustomWords(response.getText()) );
				        	System.out.println(StoryText);
				        	StoryText.setSize("100%", "100%");
				        	
				        	
				        	
				        	Label Tab = new Label();
				    		Tab.setText(NewMessageURL.substring(0, NewMessageURL.length()-5));
				    		
				    		// if current location is the active one, then we add to the lists;
				    		
				    		if (TempCurrentLocationTabs.equals(CurrentLocationTabs)) {
				    		// add opened chapter name to list
				    		openPages.add(NewMessageURL);
				    		// set chapter name to match
				    		locationpuzzlesActive.add(chapter);
				    		AnswerBox.setEnabled(true);
							AnswerBox.setFocus(true);
				        	AnswerBox.setText("");
				    		}
				    		System.out.print("blahhh"+TempCurrentLocationTabs.getWidgetIndex(StoryText));
				    		System.out.print("blahhh"+TempCurrentLocationTabs.getWidgetCount());
				    		TempCurrentLocationTabs.add(StoryText,(NewMessageURL.substring(0, NewMessageURL.length()-5)));		
				    		TempCurrentLocationTabs.selectTab(TempCurrentLocationTabs.getWidgetIndex(StoryText));
				    		
				    		
				        }
				      });
				    } catch (RequestException ex) {
				    	System.out.println("cant load message text");
				    	AnswerBox.setEnabled(true);
			    	    
			        	AnswerBox.setText("");
				    }
	}

	static public String RemoveCartReturns(String input_string) {
		input_string = input_string.replaceAll("\n", " ");
		input_string = input_string.replaceAll("\r", " ");
		input_string = input_string.replaceAll("\r\n", " ");
		return input_string;
	}
	static public String SwapCustomWords(String input_string) {
		input_string = input_string.replaceAll("<USERNAME>", Username);
		input_string = input_string.replaceAll("<ORGANISATION>", organisation);	
		return input_string;
	}
	
	public void test_for_logged_in_user()
	{
		
		RequestBuilder requestBuilder2 = new RequestBuilder(RequestBuilder.GET,"Login_System/TestIfUserIsLoggedIn.php");
		try {
		      requestBuilder2.sendRequest("", new RequestCallback() {
		        public void onError(Request request, Throwable exception) {
		        	System.out.println("error in user logged in test");
		        }

				public void onResponseReceived(Request request,
						Response response) {
					
					if (response.getText().compareTo("NO")==0){
						//display login box
						
						RootPanel.get().add(MyApplication.fadeback,0, 0);
						
						user_login.show();
						user_login.center();
						//RootPanel.get().add(user_login,0,0);
						Username = "not logged in";
						
						
					} else {
						Username = response.getText();
						//organisation
						Window.setTitle("Welcome back "+Username);
					}
					
				
				}

		      });
		
		}catch (RequestException ex) {
			
		}
		
	}
	
	
	
	public void onHistoryChanged(String PostString) {
		
		System.out.print("_____________________________________----------------------------------------");
		
		PostString = URL.decode(PostString);
		if (PostString.startsWith("LoadGameData=")){
			
			final String GameData = PostString.substring(13);
			
			//de-encrypt string	and load the data	         
			loadGameData(GameData);
			//------
			
			
			
		} else {		
		AnswerGiven(PostString);
		}
		
		
	}



	public static void loadGameData(final String GameData) {
		RequestBuilder requestBuilder2 = new RequestBuilder(RequestBuilder.POST,"DencrpytString.php");
				try {
				      requestBuilder2.sendRequest("Encode=" + URL.encodeComponent(GameData), new RequestCallback() {
				        public void onError(Request request, Throwable exception) {
				        	System.out.println("encode url failed");
				        }

				        public void onResponseReceived(Request request, Response response) {
				        	
				        	String responsetext = response.getText().replaceAll("<br />", "\n");
				        	responsetext = responsetext.replaceAll("<br>", "\n");
				        	responsetext = responsetext.substring(0, responsetext.indexOf(":end"));
				        	
				        	Feedback.setText(responsetext);
				           //update widgets HTML field
				        	System.out.println("\n Instructions-:"+GameData);
							processInstructions(responsetext);
				        }
				      });
				    } catch (RequestException ex) {
				    	String responsetext = "can not process save file";
				    	System.out.print(responsetext+"   "+ex.getMessage());
				    }
	}
	
	
}
