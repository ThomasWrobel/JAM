package com.darkflame.client;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import com.google.gwt.user.client.Event;
import com.google.gwt.user.client.Timer;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.ClickListenerCollection;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.MouseListener;
import com.google.gwt.user.client.ui.MouseListenerCollection;
import com.google.gwt.user.client.ui.MouseWheelListener;
import com.google.gwt.user.client.ui.SimplePanel;
import com.google.gwt.user.client.ui.SourcesClickEvents;
import com.google.gwt.user.client.ui.SourcesMouseEvents;
import com.google.gwt.user.client.ui.VerticalPanel;

public class SpiffyIcon extends SimplePanel {

	
	int frametotal = 1;
	int currentframe = 0;
	String animation_direction = "open";
	String basefilename = "";
	String originalfilename = "";

	String currentfilename = "";
	String filenameext = "png";
	boolean close_after_open = false;
	final Timer timer;
	// image array
	int playuntill = 100 + frametotal;
	private boolean loop = false;

	ArrayList<Image> Frames = new ArrayList<Image>();
	
	MouseListener MouseListener;
	ClickListener ClickListener;
	

	final SpiffyIcon ThisIcon = this;
	/**
	 * This is a special image that supports animations to be trigged when its
	 * rolled over.*
	 */
	public SpiffyIcon(Image[] SetFrames){
		
		System.out.print("\n adding icons:" );
		

		frametotal = (SetFrames.length -1);
		
		for (int cp = 0; cp < (frametotal+1); cp = cp + 1) {
		Frames.add(SetFrames[cp]);
		System.out.print("\n adding"+SetFrames[cp].getUrl() );
		
		}
		
		this.setWidget(Frames.get(0));
		System.out.print("\n Current="+((Image)this.getWidget()).getUrl() );
		
		timer = new UpdateFrame(ThisIcon);
		
	}
	public SpiffyIcon(String FileZeroLocation, int NumOfFrames) {

		frametotal = NumOfFrames - 1;
		basefilename = FileZeroLocation.substring(0, (FileZeroLocation
				.indexOf(".") - 1));

		originalfilename = FileZeroLocation.substring(FileZeroLocation
				.lastIndexOf("/") + 1, (FileZeroLocation.indexOf(".")));

		filenameext = FileZeroLocation
				.substring(FileZeroLocation.indexOf(".") + 1);

		// first we get all the images into the array
		System.out.print("frames-" + frametotal);
		for (int cp = 0; cp < (frametotal + 1); cp = cp + 1) {
			System.out.print("cp-" + cp);
			Image frame = new Image(
					(basefilename + "" + cp + "." + filenameext));
			
			Frames.add(frame);

		}

		// set this to the first frame
		this.setWidget(Frames.get(0));

		currentfilename = FileZeroLocation;
		// this.setWidth("100%");


		timer = new UpdateFrame(ThisIcon);
	}
	public void setFrames(Image[] SetFrames) {

		Frames.clear();
		frametotal = SetFrames.length-1;
		
		for (int cp = 0; cp < (frametotal+1); cp = cp + 1) {
			Image frame = SetFrames[cp];
			if (MouseListener!=null){
				frame.addMouseListener(MouseListener);
				}
				
				if (ClickListener!=null){
				frame.addClickListener(ClickListener);
				}
		Frames.add(SetFrames[cp]);
		
		System.out.print("\n adding"+SetFrames[cp].getUrl() );		
		}
		
		this.setWidget(Frames.get(0));
		System.out.print("\n Current="+((Image)this.getWidget()).getUrl() );
		
		
	}

	public void setURL(String FileZeroLocation, int NumOfFrames) {

		frametotal = NumOfFrames - 1;
		basefilename = FileZeroLocation.substring(0, (FileZeroLocation
				.indexOf(".") - 1));
		filenameext = FileZeroLocation
				.substring(FileZeroLocation.indexOf(".") + 1);
		originalfilename = FileZeroLocation.substring(FileZeroLocation
				.lastIndexOf("/") + 1, (FileZeroLocation.indexOf(".")));

		// preload all images
		//remove existing ones;
		Frames.clear();
		
		// first we get all the images into the array
		for (int cp = 0; cp < (frametotal+1); cp = cp + 1) {

			Image frame = new Image((basefilename + "" + cp + "." + filenameext));
			
			System.out.print("setting url to.."+basefilename + "" + cp + "." + filenameext);
			
			
			if (MouseListener!=null){
			frame.addMouseListener(MouseListener);
			}
			
			if (ClickListener!=null){
			frame.addClickListener(ClickListener);
			}
			
			Frames.add(frame);
			

		}

		this.setWidget(Frames.get(currentframe));
		
	}

	public String getUrl() {
		return currentfilename;
	}

	public void setAnimateOpen() {
		loop = false;
		animation_direction = "open";
		timer.scheduleRepeating(50);

	}

	public void setAnimateLoop() {

		animation_direction = "open";
		loop = true;
		timer.scheduleRepeating(50);

	}

	public void setAnimateClose() {

		animation_direction = "close";
		loop = false;
		timer.scheduleRepeating(50);
	}

	public void setAnimateOpenThenClose() {
		loop = false;
		animation_direction = "open";
		close_after_open = true;
		timer.scheduleRepeating(50);

	}

	public void playUntill(int frame) {
		loop = false;
		playuntill = frame;
		animation_direction = "open";
		timer.scheduleRepeating(50);
	}

	public void nextFrameLoop() {

		currentframe = currentframe + 1;

		if (currentframe > frametotal) {
			currentframe = 0;
		}
		currentfilename = basefilename + "" + currentframe + "." + filenameext;
		this.setWidget(Frames.get(currentframe));
		// MyApplication.DebugWindow.addText("set frame to:"+currentfilename);
		System.out.print(basefilename + "" + currentframe + "." + filenameext);
	}

	public void prevFrameLoop() {

		currentframe = currentframe - 1;
		if (currentframe < 0) {
			currentframe = frametotal;
		}
		currentfilename = basefilename + "" + currentframe + "." + filenameext;
		this.setWidget(Frames.get(currentframe));
		System.out.print(basefilename + "" + currentframe + "." + filenameext);
	}

	public void nextFrame() {

		currentframe = currentframe + 1;
		if (currentframe > frametotal) {
			currentframe = frametotal;
		}
		currentfilename = basefilename + "" + currentframe + "." + filenameext;
		this.setWidget(Frames.get(currentframe));
		System.out.print(basefilename + "" + currentframe + "." + filenameext);
	}

	public void firstFrame() {

		currentframe = 0;
		currentfilename = basefilename + "" + currentframe + "." + filenameext;
		this.setWidget(Frames.get(currentframe));
		System.out.print(basefilename + "" + currentframe + "." + filenameext);
	}

	public void addClickListener(ClickListener AddThisListener){
		
		ClickListener = AddThisListener;
		//add listener to all images
		
		int numofframes = Frames.size();
		int cp=0;
		while (cp<numofframes){
		
		Image frame = Frames.get(cp);
		frame.addClickListener(AddThisListener);	
		cp++;
		}
		
	}
public void addMouseListener(MouseListener AddThisListener){
		
	MouseListener = AddThisListener;
		//add listener to all images
		
		int numofframes = Frames.size();
		int cp=0;
		while (cp<numofframes){
			
		Image frame = Frames.get(cp);
		frame.addMouseListener(AddThisListener);	
		cp++;
		}
		
	}
private final class UpdateFrame extends Timer {
	private final SpiffyIcon thisIcon;

	private UpdateFrame(SpiffyIcon thisIcon) {
		this.thisIcon = thisIcon;
	}

	public void run() {
		// currentfilename=
		// basefilename+""+currentframe+"."+filenameext;
		// ThisIcon.setUrl(currentfilename);

		thisIcon.setWidget(Frames.get(currentframe));

		System.out.println("url=" + basefilename + "" + currentframe
				+ "." + filenameext);
		if (animation_direction.compareTo("open") == 0) {
			currentframe = currentframe + 1;

		} else if (animation_direction.compareTo("close") == 0) {
			currentframe = currentframe - 1;

		}

		// if out of range then stop, unless loop is set
		if (currentframe < 0) {

			if (loop) {
				currentframe = frametotal;
			} else {
				currentframe = 0;
				this.cancel();
			}

		}
		if (currentframe > playuntill) {
			currentframe = playuntill;
			playuntill = 100 + frametotal;
			this.cancel();
		}
		if (currentframe > frametotal) {
			currentframe = frametotal;

			if (close_after_open == true) {
				animation_direction = "close";
				close_after_open = false;
			} else if (loop == true) {
				currentframe = 0;
			} else if (loop == false) {
				this.cancel();
			}

		}
		// Image.prefetch(basefilename+""+currentframe+"."+filenameext);
	}
}
}
