package com.darkflame.client;

import java.util.Iterator;

import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.Event;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.DialogBox;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HasHTML;
import com.google.gwt.user.client.ui.HasHorizontalAlignment;
import com.google.gwt.user.client.ui.HasText;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.MouseListener;
import com.google.gwt.user.client.ui.PopupPanel;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.SimplePanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;

public class PopUpWithShadow extends PopupPanel implements MouseListener, isPopUpType, hasCloseDefault,hasOpenDefault {

	VerticalPanel verticalSplit = new VerticalPanel();

	Grid Container = new Grid(3,3);
	
	//private topBar caption = new topBar("Overlay");

	private Label caption = new Label("Overlay (Drag Me)");
	private boolean dragging;
	private int dragStartX, dragStartY;

	String sizeX = "200px";
	String sizeY = "100px";
	Widget Contents = new Label("");
	
	// pretty colour base
	HTML overlay = new HTML("<div></div>");
	
	//topbar bits
	 HorizontalPanel TopBar = new HorizontalPanel();
	 Label closeX = new Label("X");
	 
	 //source icon of popup
	 Widget SourceIcon = new Widget();
	 

	public PopUpWithShadow(Widget IconTrigger,String X,String Y,
			String title,Widget SetContents) {

		Contents=SetContents;
		
		SourceIcon = IconTrigger;
		
		sizeX = X;
		sizeY = Y;
		 
		this.setSize(Contents.getOffsetWidth()+16+"px", sizeY);
		DOM.setStyleAttribute(this.getElement(), "z-index", "1050");
		this.setAnimationEnabled(true);
		
		
		//this needs its own topbar set up
		caption.setText(title);
		TopBar.add(caption);
		TopBar.add(closeX);
		TopBar.setStylePrimaryName("DefaultTopBar");
		TopBar.setWidth("100%");
		TopBar.setHeight("26px");
		TopBar.add(caption);
		TopBar.setCellWidth(caption, "95%");
		TopBar.add(closeX);
		TopBar.setCellHorizontalAlignment(caption, HasHorizontalAlignment.ALIGN_CENTER);
		TopBar.setCellHorizontalAlignment(closeX, HasHorizontalAlignment.ALIGN_RIGHT);
		
		//pass this to the close
		final Widget thisone = this;
		
		closeX.addClickListener(new ClickListener(){
			 public void onClick(Widget Sender){
				 //InventoryPanel parent = (InventoryPanel)(Sender.getParent().getParent());
				 //parent.CloseDefault();
				 
				 //if the parent is the inventory panel, then we run its close function
				 System.out.print(Sender.getParent().getParent().getClass().getName());
				 String temp = Sender.getParent().getParent().getClass().getName();	
				
				 System.out.println(temp);				 
				
				((hasCloseDefault)thisone).CloseDefault();
				         			 
				RootPanel.get().remove(MyApplication.fadeback);
				
				 
			 }
		  });
		
		
		// this.setText("- Drag Me -");
		//verticalSplit.add(TopBar);
		//this.add(verticalSplit);
		//overlay.setSize("400px", "400px");
		//overlay.setStyleName("overlay");
		//verticalSplit.add(IContents);

	//	DOM.appendChild(this.getElement(), caption.getElement());
		//adopt(caption);
		caption.setStyleName("Caption");
		caption.addMouseListener(this);
		
		//set to Z ordering to high, as this should be ontop of everything!
	//	this.getElement().setAttribute("STYLE", "z-index: 100");
		
		
		//set up shadows
		//set border shadows for title
		Container.setCellPadding(0);
		Container.setCellSpacing(0);
		Container.getCellFormatter().setStyleName(0, 0, "ShadowTopLeft");
		
		Container.getCellFormatter().setWidth(0, 0, "8px");
		Container.getCellFormatter().setHeight(0, 0, "26px");
		
		Container.setWidget(0, 1, TopBar);
		
		
		Container.getCellFormatter().setHorizontalAlignment(0, 1, HorizontalPanel.ALIGN_CENTER);
		Container.getCellFormatter().setStyleName(0, 1, "notepadback");
		Container.getCellFormatter().setHeight(0, 1, "26px");
		Container.getCellFormatter().setStyleName(0, 2, "notepadback");
		Container.getCellFormatter().setHeight(0, 2, "26px");
				
		Container.getCellFormatter().setWidth(1, 0, "8px");
		Container.getCellFormatter().setStyleName(1, 0, "ShadowLeft");
		
		// load review into HTML
		Container.setWidget(1, 1, Contents);
		System.out.println("co");

		Container.getCellFormatter().setStyleName(1, 1, "Backstyle");

		//if (!(Contents.getStylePrimaryName() == null))
			//	{		Container.getCellFormatter().setStyleName(1, 2, Contents.getStylePrimaryName());
			//	}
		Container.getCellFormatter().setWidth(2, 0, "8px");
		Container.getCellFormatter().setHeight(2, 0, "8px");
		Container.getCellFormatter().setStyleName(2, 0, "ShadowCorner");
		

		Container.getCellFormatter().setHeight(2, 1, "8px");
		Container.getCellFormatter().setStyleName(2, 1, "ShadowLower");
		
		Container.getCellFormatter().setWidth(2, 2, "16px");
		Container.getCellFormatter().setHeight(2, 2, "8px");
		Container.getCellFormatter().setStyleName(2, 2, "ShadowBottomRight");
		
		this.setWidget(Container);

	}
	

	@Override
	public boolean onEventPreview(Event event) {
		// We need to preventDefault() on mouseDown events (outside of the
		// DialogBox content) to keep text from being selected when it
		// is dragged.
		if (DOM.eventGetType(event) == Event.ONMOUSEDOWN) {
			if (DOM.isOrHasChild(caption.getElement(), DOM
					.eventGetTarget(event))) {
				DOM.eventPreventDefault(event);
			}
		}

		return super.onEventPreview(event);
	}

	public void onMouseDown(Widget sender, int x, int y) {
		dragging = true;
		DOM.setCapture(caption.getElement());
		dragStartX = x;
		dragStartY = y;
		
		//set to top
		//set this ones zdepth to max+1

		MyApplication.Feedback.setText("setting too"+(MyApplication.z_depth_max+1));
		
		DOM.setStyleAttribute(this.getElement(), "z-index", ""+(MyApplication.z_depth_max+1));
		MyApplication.z_depth_max=MyApplication.z_depth_max+1;
	}

	public void onMouseEnter(Widget sender) {
	}

	public void onMouseLeave(Widget sender) {
	}

	public void onMouseMove(Widget sender, int x, int y) {
		if (dragging) {
			int absX = x + getAbsoluteLeft();
			int absY = y + getAbsoluteTop();
			setPopupPosition(absX - dragStartX, absY - dragStartY);
		}
	}

	public void onMouseUp(Widget sender, int x, int y) {
		dragging = false;
		DOM.releaseCapture(caption.getElement());
	}

	public String POPUPTYPE() {
		// TODO Auto-generated method stub
		return ((isPopUpType)Contents).POPUPTYPE();
	}

	public void RecheckSize() {
		
		//remove background, this popup specticaly dosnt use it
		 RootPanel.get().remove(MyApplication.fadeback);
		 
		 //remove shadow frame, as it dosnt use that either
		 RootPanel.get().remove(this.getParent());
		 
		 
		 //we can asign this now as being attached
	//	 MyApplication.overlayPopUpsOpen.add(this);
		 
		 
		 this.center();
	}

	public void CloseDefault() {
		// TODO Auto-generated method stub
		MyApplication.overlayPopUpsOpen.remove(this);
		  //RootPanel.get().remove(this);
		if (!(SourceIcon==null)){
		((isInventoryIcon)SourceIcon).setPopedUp(false);
		}
		
		if (!(Contents==null)){
		((hasCloseDefault)(Contents)).CloseDefault();		
		}
		
	    this.hide();
	}
	public void OpenDefault() {
		
		int z=0;
		String tempz = " zdepth=first pop";
		//first we check over all the current open popups and their z-depth;
		Iterator<PopUpWithShadow> popupIter = MyApplication.overlayPopUpsOpen.iterator();
		if (MyApplication.overlayPopUpsOpen.size()>0){
			while ( popupIter.hasNext() )
			{
				PopUpWithShadow cur = popupIter.next();
				z =  Integer.parseInt(cur.getElement().getStyle().getProperty("z-index"));
				if (z>MyApplication.z_depth_max) {
					MyApplication.z_depth_max=z;
				}
				tempz = tempz +"\n z depth = "+z;
				
			}

		} else if ((Integer.parseInt(MyApplication.fadeback.getElement().getStyle().getProperty("z-index")))>MyApplication.z_depth_max){
			MyApplication.z_depth_max=Integer.parseInt(MyApplication.fadeback.getElement().getStyle().getProperty("z-index"));

			
		
			
		}  else {
			//we can reset the max
			MyApplication.z_depth_max=1000;
			
		}
		
		MyApplication.Feedback.setText("depths="+tempz+"---max="+MyApplication.z_depth_max);
		//if the backfader is in front for some reason, we use thats zdepth instead
		
		this.center();
		
		
		//set this ones zdepth to max+2 (plus1 might be reserved for the fader)
		DOM.setStyleAttribute(this.getElement(), "z-index", ""+(MyApplication.z_depth_max+1));
		MyApplication.z_depth_max=MyApplication.z_depth_max+1;
		
		
		  MyApplication.overlayPopUpsOpen.add(this);
		  
	}

}
